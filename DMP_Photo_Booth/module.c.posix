#include "module.h"

/**
 * The printer module
 */
static void * dmp_pb_printer_module = NULL;
static int (*dmp_pm_print)(char * to_print) = NULL;
static int (*dmp_pm_edit_config)() = NULL;
static int (*dmp_pm_load_config)() = NULL;
static char * (*dmp_pm_get_config_location)(char * to_fill, size_t size) = NULL;

/**
 * The trigger module
 */
static void * dmp_pb_trigger_module = NULL;
static int (*dmp_tm_add_trigger_handler)(void (*th)()) = NULL;
static int (*dmp_tm_set_countdown)(int current) = NULL;
static int (*dmp_tm_edit_config)() = NULL;
static int (*dmp_tm_load_config)() = NULL;
static char * (*dmp_tm_get_config_location)(char * to_fill, size_t size) = NULL;

/**
 * The camera module
 */
static void * dmp_pb_camera_module = NULL;
static int (*dmp_cm_capture)() = NULL;
static int (*dmp_cm_download)(char * location) = NULL;
static int (*dmp_cm_edit_config)() = NULL;
static int (*dmp_cm_load_config)() = NULL;
static char * (*dmp_cm_get_config_location)(char * to_fill, size_t size) = NULL;

/* dmp_pb_load_module helper functions */

/**
 * Loads the printer module
 * @param module_location the location of the printer module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_load_printer_module(char * module_location)
{
	if (dmp_pb_printer_module != NULL) return DMP_PB_MODULE_ALREADY_LOADED;
	dmp_pb_printer_module = dlopen(module_location, RTLD_LAZY);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pm_print = dlsym(dmp_pb_printer_module, "dmp_pm_print");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	dmp_pm_edit_config = dlsym(dmp_pb_printer_module, "dmp_pm_edit_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pm_load_config = dlsym(dmp_pb_printer_module, "dmp_pm_load_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pm_get_config_location = dlsym(dmp_pb_printer_module, "dmp_pm_get_config_location");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	return DMP_PB_SUCCESS;
}

/**
 * Loads the trigger module
 * @param module_location the location of the trigger module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_load_trigger_module(char * module_location)
{
	if (dmp_pb_trigger_module != NULL) return DMP_PB_MODULE_ALREADY_LOADED;
	dmp_pb_trigger_module = dlopen(module_location, RTLD_LAZY);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_tm_add_trigger_handler = dlsym(dmp_pb_trigger_module, "dmp_tm_add_trigger_handler");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_tm_set_countdown = dlsym(dmp_pb_trigger_module, "dmp_tm_set_countdown");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	dmp_tm_edit_config = dlsym(dmp_pb_trigger_module, "dmp_tm_edit_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_tm_load_config = dlsym(dmp_pb_trigger_module, "dmp_tm_load_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_tm_get_config_location = dlsym(dmp_pb_trigger_module, "dmp_tm_get_config_location");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	return DMP_PB_SUCCESS;
}

/**
 * Loads the camera module
 * @param module_location the location of the camera module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_load_camera_module(char * module_location)
{
	if (dmp_pb_camera_module != NULL) return DMP_PB_MODULE_ALREADY_LOADED;
	dmp_pb_camera_module = dlopen(module_location, RTLD_LAZY);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_cm_capture = dlsym(dmp_pb_camera_module, "dmp_cm_capture");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_cm_download = dlsym(dmp_pb_camera_module, "dmp_cm_download");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	dmp_cm_edit_config = dlsym(dmp_pb_camera_module, "dmp_cm_edit_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_cm_load_config = dlsym(dmp_pb_camera_module, "dmp_cm_load_config");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_cm_get_config_location = dlsym(dmp_pb_camera_module, "dmp_cm_get_config_location");
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	
	return DMP_PB_SUCCESS;
}

/* end of dmp_pb_load_module helper functions */

int dmp_pb_load_module(module_type to_load, char * module_location)
{
	switch (to_load)
	{
		case DMP_PB_PRINTER_MODULE:
			return dmp_pb_load_printer_module(module_location);
		case DMP_PB_TRIGGER_MODULE:
			return dmp_pb_load_trigger_module(module_location);
		case DMP_PB_CAMERA_MODULE:
			return dmp_pb_load_camera_module(module_location);
		default:
			return DMP_PB_INVALID_MODULE_TYPE;
	}
}

/* dmp_pb_unload_module helper functions */

/**
 * unloads the printer module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_unload_printer_module()
{
	if (dmp_pb_printer_module == NULL) return DMP_PB_MODULE_NOT_LOADED;
	dlclose(dmp_pb_printer_module);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pb_printer_module = NULL;
	dmp_pm_print = NULL;
	return DMP_PB_SUCCESS;
	
}

/**
 * unloads the trigger module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_unload_trigger_module()
{
	if (dmp_pb_trigger_module == NULL) return DMP_PB_MODULE_NOT_LOADED;
	dlclose(dmp_pb_trigger_module);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pb_trigger_module = NULL;
	dmp_tm_add_trigger_handler = NULL;
	dmp_tm_set_countdown = NULL;
	return DMP_PB_SUCCESS;
}

/**
 * unloads the camera module
 * @return DMP_PB_SUCCESS, or an error code
 */
static int dmp_pb_unload_camera_module()
{
	if (dmp_pb_camera_module == NULL) return DMP_PB_MODULE_NOT_LOADED;
	dlclose(dmp_pb_camera_module);
	if (dlerror() != NULL) return DMP_PB_DLERROR_OCCURRED;
	dmp_pb_camera_module = NULL;
	dmp_cm_capture = NULL;
	dmp_cm_download = NULL;
	return DMP_PB_SUCCESS;
}

/* end of dmp_pb_unload_module helper functions */

int dmp_pb_unload_module(module_type to_unload)
{
	switch (to_unload)
	{
		case DMP_PB_PRINTER_MODULE:
			return dmp_pb_unload_printer_module();
		case DMP_PB_TRIGGER_MODULE:
			return dmp_pb_unload_trigger_module();
		case DMP_PB_CAMERA_MODULE:
			return dmp_pb_unload_camera_module();
		default:
			return DMP_PB_INVALID_MODULE_TYPE;
	}
}

char * dmp_pb_get_module_config_location(char * to_fill, size_t size, module_type type)
{
	if (!dmp_pb_is_loaded(type)) return NULL;
	switch (type)
	{
		case DMP_PB_PRINTER_MODULE:
			return (*dmp_pm_get_config_location)(to_fill, size);
		case DMP_PB_TRIGGER_MODULE:
			return (*dmp_tm_get_config_location)(to_fill, size);;
		case DMP_PB_CAMERA_MODULE:
			return (*dmp_cm_get_config_location)(to_fill, size);;
		default:
			return NULL;
	}
}

int dmp_pb_edit_module_config(module_type type)
{
	if (!dmp_pb_is_loaded(type)) return DMP_PB_MODULE_NOT_LOADED;
	switch (type)
	{
		case DMP_PB_PRINTER_MODULE:
			return (*dmp_pm_edit_config)();
		case DMP_PB_TRIGGER_MODULE:
			return (*dmp_tm_edit_config)();
		case DMP_PB_CAMERA_MODULE:
			return (*dmp_cm_edit_config)();
		default:
			return DMP_PB_INVALID_MODULE_TYPE;
	}
}

int dmp_pb_load_module_config(module_type type)
{
	if (!dmp_pb_is_loaded(type)) return DMP_PB_MODULE_NOT_LOADED;
	switch (type)
	{
		case DMP_PB_PRINTER_MODULE:
			return (*dmp_pm_load_config)();
		case DMP_PB_TRIGGER_MODULE:
			return (*dmp_tm_load_config)();
		case DMP_PB_CAMERA_MODULE:
			return (*dmp_cm_load_config)();
		default:
			return DMP_PB_INVALID_MODULE_TYPE;
	}
}

int dmp_pb_swap_module(module_type to_swap, char * new_module_location)
{
	int result = dmp_pb_unload_module(to_swap);
	if (result != DMP_PB_SUCCESS) return result;
	return dmp_pb_load_module(to_swap, new_module_location);
}

bool dmp_pb_is_loaded(module_type to_check)
{
	if (to_check == DMP_PB_CAMERA_MODULE) return (dmp_pb_camera_module != NULL
			&& dmp_cm_capture != NULL && dmp_cm_download != NULL);
	else if (to_check == DMP_PB_TRIGGER_MODULE) return (dmp_pb_trigger_module != NULL
			&& dmp_tm_add_trigger_handler != NULL && dmp_tm_set_countdown != NULL);
	else if (to_check == DMP_PB_PRINTER_MODULE) return (dmp_pb_printer_module != NULL
			&& dmp_pm_print != NULL);
	else return false;
}

int dmp_pb_cm_capture()
{
	if (!dmp_pb_is_loaded(DMP_PB_CAMERA_MODULE)) return DMP_PB_MODULE_NOT_LOADED;
	return (*dmp_cm_capture)();
}

int dmp_pb_cm_download(char * location)
{
	if (!dmp_pb_is_loaded(DMP_PB_CAMERA_MODULE)) return DMP_PB_MODULE_NOT_LOADED;
	return (*dmp_cm_download)(location);
}

int dmp_pb_pm_print(char * to_print)
{
	if (!dmp_pb_is_loaded(DMP_PB_PRINTER_MODULE)) return DMP_PB_MODULE_NOT_LOADED;
	return (*dmp_pm_print)(to_print);
}

int dmp_pb_tm_add_trigger_handler(void (*th)())
{
	if (!dmp_pb_is_loaded(DMP_PB_TRIGGER_MODULE)) return DMP_PB_MODULE_NOT_LOADED;
	return (*dmp_tm_add_trigger_handler)(th);
}

int dmp_pb_tm_set_countdown(int current)
{
	if (!dmp_pb_is_loaded(DMP_PB_TRIGGER_MODULE)) return DMP_PB_MODULE_NOT_LOADED;
	return (*dmp_tm_set_countdown)(current);
}